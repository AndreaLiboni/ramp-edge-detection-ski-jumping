/run/media/andrea/Sviluppo/Universit√†/Computer-Vision/Progetto/ramp-edge-detection-ski-jumping/venv/lib/python3.12/site-packages/torch/utils/cpp_extension.py:1964: UserWarning: TORCH_CUDA_ARCH_LIST is not set, all archs for visible cards are included for compilation. 
If this is not desired, please set os.environ['TORCH_CUDA_ARCH_LIST'].
  warnings.warn(
loading data...
data loaded!
Fitting 5 folds for each of 3 candidates, totalling 15 fits
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       93.5153        0.3516  17.4336
      2        0.3860        0.3478  17.3846
      3        0.3859        0.3475  17.4495
      4        0.3859        0.3477  17.5022
      5        0.3858        0.3487  17.5270
start accuracy_score
end accuracy_score
[CV 1/5] END ................module__int_dim=50;, score=0.026 total time= 1.6min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       70.6574        0.3708  17.5547
      2        0.3898        0.3556  17.5524
      3        0.3891        0.3557  17.5679
      4        0.3883        0.3549  17.5829
      5        0.3878        0.3548  17.6115
start accuracy_score
end accuracy_score
[CV 2/5] END ................module__int_dim=50;, score=0.024 total time= 1.6min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1      102.4019        0.3513  17.6070
      2        0.3797        0.3494  17.6096
      3        0.3797        0.3493  17.6304
      4        0.3796        0.3492  17.6545
      5        0.3796        0.3492  17.6661
start accuracy_score
end accuracy_score
[CV 3/5] END ................module__int_dim=50;, score=0.038 total time= 1.6min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1      124.6287        0.3534  17.6794
      2        0.3661        0.3494  17.6567
      3        0.3660        0.3490  17.6715
      4        0.3660        0.3488  17.6686
      5        0.3660        0.3488  17.6740
start accuracy_score
end accuracy_score
[CV 4/5] END ................module__int_dim=50;, score=0.002 total time= 1.6min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       69.8046        0.3703  17.6473
      2        0.3910        0.3862  17.6493
      3        0.3906        0.3966  17.6677
      4        0.3903        0.3654  17.6766
      5        0.3900        0.3642  17.6668
start accuracy_score
end accuracy_score
[CV 5/5] END ................module__int_dim=50;, score=0.001 total time= 1.6min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       58.4256        0.3576  23.5133
      2        0.3855        0.3485  23.4970
      3        0.3854        0.3476  23.5299
      4        0.3853        0.3523  23.5674
      5        0.3852        0.3504  23.8156
start accuracy_score
end accuracy_score
[CV 1/5] END ...............module__int_dim=100;, score=0.044 total time= 2.1min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       70.1283        0.3574  23.5559
      2        0.3825        0.3491  23.5618
      3        0.3824        0.3490  23.5808
      4        0.3824        0.3488  23.5777
      5        0.3824        0.3489  23.5824
start accuracy_score
end accuracy_score
[CV 2/5] END ...............module__int_dim=100;, score=0.003 total time= 2.1min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       63.2399        0.3483  23.5516
      2        0.3797        0.3483  23.5661
      3        0.3796        0.3482  23.5820
      4        0.3796        0.3482  23.5805
      5        0.3796        0.3482  23.5834
start accuracy_score
end accuracy_score
[CV 3/5] END ...............module__int_dim=100;, score=0.003 total time= 2.1min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       88.1136        0.2631  23.5299
      2        0.2040        0.2069  23.5335
      3        0.2005        0.1885  23.5530
      4        0.1395        0.0980  23.5671
      5        0.1136        0.1243  23.5552
start accuracy_score
end accuracy_score
[CV 4/5] END ...............module__int_dim=100;, score=0.483 total time= 2.1min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       96.7324        0.3558  23.5161
      2        0.3886        0.3531  23.4988
      3        0.3884        0.3529  23.5133
      4        0.3882        0.3527  23.9266
      5        0.3880        0.3525  23.6826
start accuracy_score
end accuracy_score
[CV 5/5] END ...............module__int_dim=100;, score=0.001 total time= 2.1min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       84.7570        0.4140  44.8890
      2        0.3865        0.3820  44.8037
      3        0.3861        0.3650  44.8515
      4        0.3858        0.3682  44.8639
      5        0.3856        0.3625  44.9450
start accuracy_score
end accuracy_score
[CV 1/5] END ...............module__int_dim=200;, score=0.051 total time= 4.0min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       71.7077        0.3591  44.8149
      2        0.3823        0.3502  44.8398
      3        0.3823        0.3500  44.9019
      4        0.3822        0.3568  44.8987
      5        0.3822        0.3494  45.0043
start accuracy_score
end accuracy_score
[CV 2/5] END ...............module__int_dim=200;, score=0.003 total time= 4.0min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       81.5994        0.3535  44.8617
      2        0.3797        0.3499  45.0576
      3        0.3796        0.3499  45.5797
      4        0.3796        0.3498  45.1005
      5        0.3795        0.3497  45.0679
start accuracy_score
end accuracy_score
[CV 3/5] END ...............module__int_dim=200;, score=0.023 total time= 4.0min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       67.9436        0.6836  44.9304
      2        0.3713        0.3833  45.0311
      3        0.3711        0.3828  45.0654
      4        0.3708        0.3813  45.0808
      5        0.3706        0.3819  45.1067
start accuracy_score
end accuracy_score
[CV 4/5] END ...............module__int_dim=200;, score=0.020 total time= 4.0min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       75.1117        0.4146  44.9737
      2        0.3831        0.3640  45.1989
      3        0.3831        0.3679  45.2064
      4        0.3830        0.3543  45.2052
      5        0.3830        0.3554  45.1912
start accuracy_score
end accuracy_score
[CV 5/5] END ...............module__int_dim=200;, score=0.035 total time= 4.0min
  epoch    train_loss    valid_loss      dur
-------  ------------  ------------  -------
      1       57.5022        0.3833  29.7779
      2        0.3830        0.3779  29.6576
      3        0.3824        0.3888  29.6782
      4        0.3817        0.4090  29.7000
      5        0.3813        0.4206  29.6893
0.1068109652578831
{'module__int_dim': 100}
GridSearchCV(error_score='raise',
             estimator=NeuralNet(_params_to_validate={'module__backbone'}, batch_size=8, criterion=<class 'torch.nn.modules.loss.MSELoss'>, device='cuda', max_epochs=5, module=<class 'model.network.Net'>, module__backbone='resnet50', optimizer=<class 'torch.optim.adamw.AdamW'>),
             n_jobs=1, param_grid={'module__int_dim': [50, 100, 200]},
             scoring=make_scorer(accuracy_score, response_method='predict'),
             verbose=3)